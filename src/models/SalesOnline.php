<?php

namespace modava\customer\models;

use cheatsheet\Time;
use modava\customer\CustomerModule;
use modava\customer\models\table\CustomerTable;
use modava\customer\models\table\CustomerStatusCallTable;
use modava\customer\models\table\CustomerStatusFailTable;
use yii\behaviors\AttributeBehavior;
use yii\db\ActiveRecord;
use yii\helpers\ArrayHelper;

class SalesOnline extends Customer
{
    public $toastr_key = 'sales-online';
    public $remind_call;

    public function behaviors()
    {
        $status_call_dathen = ArrayHelper::map(CustomerStatusCall::getStatusCallDatHen(), 'id', 'id');
        return array_merge(parent::behaviors(), [
            'type' => [
                'class' => AttributeBehavior::class,
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['type']
                ],
                'value' => CustomerTable::TYPE_ONLINE
            ],
            'birthday' => [
                'class' => AttributeBehavior::class,
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['birthday'],
                    ActiveRecord::EVENT_BEFORE_UPDATE => ['birthday']
                ],
                'value' => function () {
                    if ($this->birthday != null) return date('Y-m-d', strtotime($this->birthday));
                    return null;
                }
            ],
            'remind_call_time' => [
                'class' => AttributeBehavior::class,
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['remind_call_time'],
                    ActiveRecord::EVENT_BEFORE_UPDATE => ['remind_call_time'],
                ],
                'value' => function () use ($status_call_dathen) {
                    if (in_array($this->status_call, $status_call_dathen)) return null;
                    if ($this->status_fail != null) return null;
                    if ($this->remind_call_time != null) {
                        if (is_numeric($this->remind_call_time)) return $this->remind_call_time;
                        return strtotime($this->remind_call_time);
                    }
                    return strtotime(date('d-m-Y') . ' +1day') + 8 * Time::SECONDS_IN_AN_HOUR; // Nếu không set nhắc lịch => nhắc lịch gọi vào 8h sáng ngày hôm sau
                }
            ],
        ]); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        $status_call_dathen = ArrayHelper::map(CustomerStatusCall::getStatusCallDatHen(), 'id', 'id');
        return [
            [['name', 'phone', 'status_call'], 'required'],
            ['phone', 'unique'],
            [['name', 'phone', 'address', 'sale_online_note'], 'string', 'max' => 255],
            [['sex', 'ward', 'fanpage_id', 'status_call', 'status_fail', 'co_so'], 'integer'],
            [['birthday'], 'date', 'format' => 'php:d-m-Y'],
            [['co_so', 'time_lich_hen'], 'required', 'when' => function () use ($status_call_dathen) {
                return $this->status_call != null && in_array($this->status_call, $status_call_dathen);
            }, 'whenClient' => "function(){
                var status_call = $('#status_call').val() || null;
                return status_call != null && " . json_encode(array_values($status_call_dathen)) . ".includes(status_call);
            }"],
            [['remind_call_time'], 'required', 'when' => function () use ($status_call_dathen) {
                return $this->status_call != null && !in_array($this->status_call, $status_call_dathen) && $this->remind_call == true;
            }, 'whenClient' => "function(){
                var status_call = $('#status_call').val() || null;
                return status_call != null && !" . json_encode(array_values($status_call_dathen)) . ".includes(status_call) && $('#remind-call').is(':checked');
            }"],
            [['status_fail'], 'required', 'when' => function () use ($status_call_dathen) {
                return $this->status_call != null && !in_array($this->status_call, $status_call_dathen) && $this->remind_call == false;
            }, 'whenClient' => "function(){
                var status_call = $('#status_call').val() || null;
                return status_call != null && !" . json_encode(array_values($status_call_dathen)) . ".includes(status_call) && !$('#remind-call').is(':checked');
            }"],
            [['remind_call'], 'safe'],
            [['status_call'], 'validateStatusCall'],
        ];
    }

    public function validateStatusCall()
    {
        if (!$this->hasErrors()) {
            $old_status_call = CustomerStatusCallTable::getById($this->getOldAttribute('status_call'));
            if ($old_status_call != null && $old_status_call->accept == CustomerStatusCallTable::STATUS_PUBLISHED && $this->statusCallHasOne->accept != CustomerStatusCallTable::STATUS_PUBLISHED) {
                $this->addError('status_call', 'Không thể chuyển trạng thái từ đặt hẹn sang fail');
            }
        }
    }
}