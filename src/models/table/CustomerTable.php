<?php

namespace modava\customer\models\table;

use cheatsheet\Time;
use modava\auth\models\User;
use modava\customer\CustomerModule;
use modava\location\models\table\LocationWardTable;
use Yii;
use yii\db\ActiveRecord;
use yii\db\Exception;

class CustomerTable extends \yii\db\ActiveRecord
{
    const TYPE_ONLINE = 1;
    const TYPE_DIRECT = 2;
    const TYPE = [
        self::TYPE_ONLINE => 'Online',
        self::TYPE_DIRECT => 'Direct'
    ];
    const SEX_WOMEN = 0;
    const SEX_MEN = 1;
    const SEX_OTHER = 2;
    const SEX = [
        self::SEX_WOMEN => 'Nữ',
        self::SEX_MEN => 'Nam',
        self::SEX_OTHER => 'Chưa xác định',
    ];

    public static function tableName()
    {
        return 'customer';
    }

    public function getWardHasOne()
    {
        return $this->hasOne(LocationWardTable::class, ['id' => 'ward']);
    }

    public function getFanpageHasOne()
    {
        return $this->hasOne(CustomerFanpageTable::class, ['id' => 'fanpage_id']);
    }

    public function getPermissionUserHasOne()
    {
        return $this->hasOne(User::class, ['id' => 'permission_user']);
    }

    public function getDirectSaleHasOne()
    {
        return $this->hasOne(User::class, ['id' => 'direct_sale']);
    }

    public function getStatusCallHasOne()
    {
        return $this->hasOne(CustomerStatusCallTable::class, ['id' => 'status_call']);
    }

    public function getStatusFailHasOne()
    {
        return $this->hasOne(CustomerStatusFailTable::class, ['id' => 'status_fail'])->andWhere([CustomerStatusFailTable::tableName() . '.type' => CustomerStatusFailTable::TYPE_CALL_FAIL]);
    }

    public function getStatusDatHenHasOne()
    {
        return $this->hasOne(CustomerStatusDatHenTable::class, ['id' => 'status_dat_hen']);
    }

    public function getStatusDongYHasOne()
    {
        return $this->hasOne(CustomerStatusDongYTable::class, ['id' => 'status_dong_y']);
    }

    public function getStatusDongYFailHasOne()
    {
        return $this->hasOne(CustomerStatusFailTable::class, ['id' => 'status_dong_y_fail'])->andWhere([CustomerStatusFailTable::tableName() . '.type' => CustomerStatusFailTable::TYPE_DONG_Y_FAIL]);
    }

    public function getCoSoHasOne()
    {
        return $this->hasOne(CustomerCoSoTable::class, ['id' => 'co_so']);
    }

    public function getOrderHasMany()
    {
        return $this->hasMany(CustomerOrderTable::class, ['customer_id' => 'id']);
    }

    public function afterDelete()
    {
        $cache = Yii::$app->cache;
        $keys = [
            'redis-customer-table-get-customer-dong-y',
            'redis-customer-table-get-by-id-' . $this->id,
            'redis-customer-table-get-by-phone-' . $this->phone
        ];
        foreach ($keys as $key) {
            $cache->delete($key);
        }
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        $cache = Yii::$app->cache;
        $keys = [
            'redis-customer-table-get-customer-dong-y',
            'redis-customer-table-get-by-id-' . $this->id,
            'redis-customer-table-get-by-phone-' . $this->phone
        ];
        foreach ($keys as $key) {
            $cache->delete($key);
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public static function getById($id)
    {
        $cache = Yii::$app->cache;
        $key = 'redis-customer-table-get-by-id-' . $id;
        $data = $cache->get($key);
        if ($data == false) {
            $data = self::find()->where([self::tableName() . '.id' => $id])->one();
            $cache->set($key, $data);
        }
        return $data;
    }

    public static function getByPhone($phone, $data_cache = YII2_CACHE)
    {
        $cache = Yii::$app->cache;
        $key = 'redis-customer-table-get-by-phone-' . $phone;
        $data = $cache->get($key);
        if ($data == false || $data_cache === false) {
            try {
                $query = self::find()->where([self::tableName() . '.phone' => $phone]);
                $data = $query->one();
            } catch (Exception $ex) {
                $data = null;
            }
            $cache->set($key, $data);
        }
        return $data;
    }

    public static function getCustomerDongY()
    {
        $cache = Yii::$app->cache;
        $key = 'redis-customer-table-get-customer-dong-y';
        $data = $cache->get($key);
        if ($data == false) {
            $data = self::find()->joinWith(['statusDongYHasOne'])->where([CustomerStatusDongYTable::tableName() . '.accept' => CustomerStatusDongYTable::STATUS_PUBLISHED])->all();
            $cache->set($key, $data);
        }
        return $data;
    }
}
